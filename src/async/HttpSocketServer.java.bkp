
package async;

import bayou.http.*;
import bayou.websocket.*;
import bayou.async.*;
import java.time.Duration;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.nio.charset.Charset;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.concurrent.Future;
import java.nio.channels.AsynchronousSocketChannel;
import java.util.concurrent.ExecutionException;
import java.net.InetSocketAddress;
import java.nio.channels.CompletionHandler;
import java.util.Arrays;
import java.io.ByteArrayOutputStream;
import javax.xml.bind.DatatypeConverter;
import java.security.*;

class MyWebHandler implements HttpHandler
{

 @Override
    public Async<HttpResponse> handle(HttpRequest request)
    {
        return HttpResponse.text(200, "Hello World1111111");
    }

}

class MyWsHandler implements WebSocketHandler
{

	 AsynchronousSocketChannel client = null;
     InetSocketAddress hostAddress = new InetSocketAddress("localhost", 9890);
	 boolean init = false;
	 int i =0;
	 ByteArrayOutputStream baos = new ByteArrayOutputStream();
	 
    @Override
    public Async<WebSocketResponse> handle(WebSocketRequest request)
    {
        // note: same-origin has already been enforced (default configuration)        
			init = true;			
			i=0;
			System.out.println("Got WebSocket Request");
            return WebSocketResponse.accept( this::handleChannel );
    }
		
   void readFromServer(WebSocketChannel channel){	
	final ByteBuffer buffer = ByteBuffer.allocate(5000);
	// callback 2
	System.out.println("Waiting for Client");
							client.read(buffer, channel, new CompletionHandler<Integer, WebSocketChannel>() {
								@Override
								public void completed(Integer result, final WebSocketChannel scAttachment) {	
									System.out.println("Reading from server completed");
									System.out.println("Result for Read: " + result);
									System.out.println("Has Remaining " + buffer.remaining());
									System.out.println("Buffer Limit " + buffer.limit());
									
									buffer.clear();
										try {					
										
										  if(buffer.hasRemaining() && result>=0)
										  {												
												byte arr[] = new byte[result];	
												ByteBuffer b = buffer.get(arr,0,result);												
												baos.write(arr,0,result);												
												scAttachment.writeBinary(baos.toByteArray());
												System.out.println("Size sent " + baos.size());
												String message = new String(buffer.array()).trim();		
												System.out.println(new String(baos.toByteArray()));
												System.out.println("HASH : " + DatatypeConverter.printHexBinary(MessageDigest.getInstance("MD5").digest(baos.toByteArray())));
												baos = new ByteArrayOutputStream();						
												System.out.println("Client is connected: " + client.isOpen());												
											}else{
												byte arr[] = new byte[result];
												ByteBuffer b = buffer.get(arr,0,result);
												baos.write(arr,0,result);
												client.read(buffer, scAttachment, this);
											}
											} catch (Exception e) {
												e.printStackTrace();
											}																										

									
									//byte [] message1 = new String("OVER").getBytes();
									//buffer.wrap(message1);
																									
								}
								@Override
								public void failed(Throwable t, WebSocketChannel scAttachment) {
									t.printStackTrace();
								}								
							});	
	
	}

	void process(ByteBuffer z,WebSocketChannel channel)
	{
		try{
			if(i>1)
			{
				System.out.println("DATA FROM WS " +new String(z.array()).trim());
				int result1 = client.write(z).get(); 
				System.out.println("HASH : " + DatatypeConverter.printHexBinary(MessageDigest.getInstance("MD5").digest(z.array())));
				System.out.println("Sent to Server " + result1);				
				readFromServer(channel);								
			}
			else if(i==1)
			{
				client = AsynchronousSocketChannel.open();
				Future future = client.connect(hostAddress);
				future.get(); // returns null
				System.out.println("Client is started: " + client.isOpen());
				init=false;
			 
				ByteBuffer buffer = ByteBuffer.allocate(5000); 
				System.out.println("BEFORE READ");
				int result = client.read(buffer).get();
				byte arr[] = new byte[result];
				ByteBuffer b = buffer.get(arr,0,result);
				System.out.println("READ FROM SERVER " + (buffer.capacity() - buffer.remaining()));				
				channel.writeBinary(b.array());
				//handleChannel(channel);
			}
			}catch(Exception e){
				e.printStackTrace();
			  }
	}
	
    Async<Void> handleChannel(WebSocketChannel channel)
    {
        // work with the channel after a successful handshake		
				
			try{
			System.out.println("VALUE OF " + i);			
			//.peek(z -> System.out.println("FROM CLIENT : " +  new String(z.array(),Charset.forName("US-ASCII")).trim()))		
			
			Async<ByteBuffer> d = channel.readBinary(5000);
			d.peek(z -> System.out.println("READ FROM WS " + (z.capacity())))
			 .peek(z -> z.clear())
			 .peek(z -> i++)
			 .peek(z -> process(z,channel))			 
			 .peek(z -> handleChannel(channel));
			
			 /*Async<String> d = channel.readText(1024);
			 d.peek(z -> System.out.println(d))
			  .peek(z -> channel.writeText(z))
			  .peek(z -> handleChannel(channel));*/
			  
			  }catch(Exception e){
				e.printStackTrace();
			  }
			  
		 return Fiber.sleep(Duration.ofSeconds(5));
    }
}

public class HttpSocketServer
{
public static void main(String[] args) throws Exception
{
    HttpServer httpServer = new HttpServer(new MyWebHandler());
    httpServer.conf().trafficDump( System.out::print );

    WebSocketServer wsServer = new WebSocketServer( httpServer, new MyWsHandler() );
    wsServer.conf().trafficDump( System.err::print );

	System.out.println("Starting WebSocket Server....");
    httpServer.start();	
}

}